////
/// @group Utilities
////

//****************************************************
//	Variables & functions
//****************************************************

/// Rajoute une transition sur toutes les propriété de l'élément
/// @param {String} $time [default 0.5s] - Durée de l'animation
/// @param {string} $property [default all] - La/Les propriétés à animer
@mixin hover-transition($time:0.5s, $property: all){
	-webkit-transition: $property $time;
	transition: $property $time;
	
	&:hover{text-decoration: none;}
}

/// Applique la propriété transform avec tous les préfix nécesaires.
/// @param {String} $val - Valeur à transformer.
@mixin transform($val){
	-ms-transform: $val;
	-webkit-transform: $val;
	-moz-transform: $val;
	-o-transform: $val;
	transform: $val;
}

/// Aligne un element dans le millieu d'un élément.
/// Utilise la technique de mettre l'élément en absolute à 50% avec un translate à -50%
/// @param {Bool} $horz [default false] - Si l'alignement doit être à l'horizontale
@mixin align-middle($horz:false){
	position: absolute;
	@if $horz{
		left: 50%;
		-ms-transform: translateX(-50%);
		-webkit-transform: translateX(-50%);
		-moz-transform: translateX(-50%);
		-o-transform: translateX(-50%);
		transform: translateX(-50%);
	} @else {
		top: 50%;
		-ms-transform: translateY(-50%);
		-webkit-transform: translateY(-50%);
		-moz-transform: translateY(-50%);
		-o-transform: translateY(-50%);
		transform: translateY(-50%);
	}
}


/// Défini la couleur et l'opacité du texte pour les placeholder des inputs
/// @param {String} $Pcolor [default false] - Couleur du texte
/// @param {Float} $opacity [default 1] - Opacité
@mixin placeholderColor($Pcolor, $opacity:1){
    ::-webkit-input-placeholder { /* WebKit browsers */
        color:$Pcolor;
        opacity:$opacity;
        @content;
    }
    :-moz-placeholder { /* Mozilla Firefox 4 to 18 */
       color:$Pcolor;
       opacity:$opacity;
       @content;
    }
    ::-moz-placeholder { /* Mozilla Firefox 19+ */
       color:$Pcolor;
       opacity:$opacity;
       @content;
    }
    :-ms-input-placeholder { /* Internet Explorer 10+ */
       color:$Pcolor;
       opacity:$opacity;
       @content;
    }
}

/// Ajoute display: flex
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

/// Défini la propriété flex de l'élément
@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}

/// Défini la propriété order de l'élément pour déterminer sa place dans un flexbox
@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
  -moz-box-ordinal-group: $val;     
  -ms-flex-order: $val;     
  -webkit-order: $val;  
  order: $val;
}


/// Défini les propriétés d'animation
/// @param {Float} $delay - Délai avant que l'animation commence
/// @param {Float} $duration - Durée de l'animation
/// @param {String} $animation - animation-name: le nom de l'animation
/// @param {String} $fill [default forwards] - none, fowards, backwards, both
@mixin animation($delay, $duration, $animation, $fill: forwards){
    -webkit-animation-delay: $delay;
    -webkit-animation-duration: $duration;
    -webkit-animation-name: $animation;
    -webkit-animation-fill-mode: $fill;

    -moz-animation-delay: $delay;
    -moz-animation-duration: $duration;
    -moz-animation-name: $animation;
    -moz-animation-fill-mode: $fill;

    -o-animation-delay: $delay;
    -o-animation-duration: $duration;
    -o-animation-name: $animation;
    -o-animation-fill-mode: $fill;

    animation-delay: $delay;
    animation-duration: $duration;
    animation-name: $animation;
    animation-fill-mode: $fill;
}

/// Ajoute tous les keyframes requis pour une animation.
/// @param {String} $animation_name - Nom de l'animation.
/// @example
///     @include keyframe(slideInLeft) {
///        0% {
///            left: -2000px;
///        }
///     
///        100% {
///            left: 0px;
///        }
///     }
///     
///     @include animation(0.7s, 1.5s, slideInLeft);
@mixin keyframe($animation_name){
    @-webkit-keyframes #{$animation_name}{
        @content;
    }

    @-moz-keyframes #{$animation_name}{
        @content;
    }

    @-o-keyframes #{$animation_name}{
        @content;
    }

    @keyframes #{$animation_name}{
        @content;
    }
}

/// Retourne un media query avec la largeur donnée
/// 
/// @param {String} $width [768px]
@mixin media-screen($width: 768px){
	@media only screen and (max-width: $width) {
		@content;
	}
}

/// Affiche un tableau (map) de façon lisible.
/// 
/// @param {Map} $map
@mixin debug-map($map) {
    @at-root {
        __properties__ {
            @each $key, $value in $map {
                #{$key}: inspect($value);
            }
        }
    }
}

/// Retire un item d'une liste.
///
/// @param {List} $list - une list SASS.
/// @param {Number} $index - L'index de l'élément à retirer dans la list.
/// @returns {List} - Une list SASS.
@function list-remove($list, $index) {
	$newList: ();
	@for $i from 1 through length($list) {
	  @if $i != $index {
		$newList: append($newList, nth($list,$i), 'space');
	  }
	}
	@return $newList;
}

/// Ordonne une list SASS.
///
/// @param {List} $list - La liste à ordonner.
/// @param {String} $order [ASC] - Ordre de tri.
/// @returns {List} - Une liste SASS ordonné.
/// @requires {function} list-remove
@function list-sort($list, $order: "asc") {
	$sortedlist: ();
	@while length($list) > 0 {
	  $value: nth($list,1);
	  @each $item in $list {
		@if($order == "asc"){
			@if $item < $value {
			$value: $item;
			}
		}@else{
			@if $item > $value {
				$value: $item;
			}
		}
	  }
	  $sortedlist: append($sortedlist, $value, 'space');
	  $list: list-remove($list, index($list, $value));
	}
	@return $sortedlist;
}

/// Ordonne un tableau (map) SASS.
///
/// @param {Map} $map - Le tableau (map) à ordonner.
/// @param {String} $order [ASC] - Ordre de tri.
/// @returns {Map} - Le tableau (map) ordonné.
/// @requires {function} list-sort
@function map-sort($map, $order: "asc") {
	$keys: list-sort(map-keys($map), $order);
	$sortedMap: ();
	@each $key in $keys {
		$sortedMap: map-merge($sortedMap, ($key: map-get($map, $key)));
	}
	@return $sortedMap;
}

/// Facilite la création de grid en flex.
///
/// @param {Number} $col - Nombre de colonne.
/// @param {String} $child [.col] - Le sélecteur pour les éléments en colonne.
/// @param {String} $col-gap [0px] - Distance entre chaque colonnes.
/// @param {String} $row-gap [0px] - Distance entre chaque rangées.
/// @param {Map} $responsive [()] - Permet de rendre les colonnes responsives.
/// @example 
///		@include cdm-grid(3, ".col", 30px, 0px, (
///			$mobile_width: (
///				col: 2,
///				col-gap: 15px,
///				
///				extras: (
///					".col:last-child": (
///						width: 100%,
///						margin-right: 0px
///					)
///				)
///			),
///			480: (
///				col: 1
///			)
///		));
@mixin cdm-grid($col, $child: ".col", $col-gap: 0px, $row-gap: 0px, $responsive: ()){
	display: flex;
	flex-wrap: wrap;

	#{$child}{
		width: calc(100% / #{$col} - ((#{$col-gap} * #{$col - 1}) / #{$col})); /* On divise la largeur totale disponible également entre toutes les colonnes, puis on soustrait à chaque colonnes le gap désiré */
		margin-right: $col-gap;
		margin-bottom: $row-gap;

		/* On retire le margin right pour que la dernière colonne arrive égale au contenu. */
		&:nth-child(#{$col}n){
			margin-right: 0px;
		}
	}
	$responsive: map-sort($responsive, "desc"); // Ordonne le tableau en order décroissant.
	$oldcol: $col; // Garde la dernière colonne dans une variable pour retirer le margin-right:0px;
	$passedBreakpoints: (none: (col: $col)); // Tous les breakpoints déjà appliqués pour tous les changer si on change le gap des colonnes. Inclut la colonne de base.

	@each $breakpoint, $data in $responsive{
		$breakpoint: if(unitless($breakpoint), #{$breakpoint}px, $breakpoint); // Met px si le breakpoint ne la pas.
		$passedBreakpoints: map-merge($passedBreakpoints, ($breakpoint: $data)); // Ajoute le breakpoint dans les breakpoints passé.
		$newcol: map-get($data, col); // Colonne actuelle.

		@include media-screen(#{$breakpoint}){
			$gapChanged: false;
			$newgap: map-get($data, col-gap);

			// Si un nouveau gap de colonne est setter.
			@if($newgap and $newgap != $col-gap){
				$gapChanged: true;
				$col-gap: $newgap;
			}

			$row-gap: if(map-get($data, row-gap), map-get($data, row-gap), $row-gap);

			#{$child}{
				width: calc(100% / #{$newcol} - ((#{$col-gap} * #{$newcol - 1}) / #{$newcol}));
				margin-right: $col-gap;
				margin-bottom: $row-gap;

				// Si le gap est changé, on le change pour toute les colonnes antérieures.
				@if($gapChanged){
					$break: false; // Il n'existe pas de break en SASS, on le fait donc custom.
					@each $subBreakpoint, $subData in $passedBreakpoints{
						@if($subBreakpoint == $breakpoint){
							$break: true;
						}

						@if($break == false){
							&:nth-child(#{map-get($subData, col)}n){ // reset toutes les valeurs précédentes au nouveau gap.
								margin-right: $col-gap;
							}
						}
					}
				}@else{
					&:nth-child(#{$oldcol}n){ // Reset valeur précédente seulement.
						margin-right: $col-gap;
					}
				}

				&:nth-child(#{$newcol}n){
					margin-right: 0px;
				}
			}

			$extras: if(map-get($data, extras), map-get($data, extras), null); // Permet l'ajout de style custom dans le media query.

			@if($extras){
				@each $selector, $values in $extras{
					#{$selector}{
						@each $attr, $value in $values{
							#{$attr}: #{$value};
						}
					}
				}
			}
		}

		$oldcol: $newcol;
	}
}