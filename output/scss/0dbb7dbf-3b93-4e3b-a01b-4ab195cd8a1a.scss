@use '~@liveperson-design-system/tokens/scss/border-radius';
@use '~@liveperson-design-system/tokens/scss/spacing';
@use '~@liveperson-design-system/tokens/scss/colors';
@use '~@liveperson-design-system/tokens/scss/colors-light';
@use '~@liveperson-design-system/tokens/scss/common';
@use '~@liveperson-design-system/tokens/scss/helpers';
@use '~@liveperson-design-system/tokens/scss/transparency';
@use '~@liveperson-design-system/tokens/scss/typography';

@include common.base-styles;

:host {
  --size-height: 32px;

  --color-bg: #{colors.$blue};
  --color-bg--hover: #{colors.$blue-dark};
  --color-bg--active: #{colors.$blue-darker};
  --color-bg--focus: #{colors.$blue-dark};
  --color-bg--disabled: #{colors.$blue};

  --color-text: #{colors.$navy-white};

  --color-outline: #{colors.$focus-outline};

  display: inline-flex;
  align-items: center;
  height: var(--size-height);
  @include typography.with-font-family;
  @include typography.button(large);
  text-align: center;
  color: var(--color-text);
  @include border-radius.border-radius(xxs);
  background: var(--color-bg);
  @include spacing.padding(none, m);
  cursor: pointer;
}
:host([theme="light"]) {
  --color-bg: #{colors-light.$blue};
  --color-bg--hover: #{colors-light.$blue-dark};
  --color-bg--active: #{colors-light.$blue-darker};
  --color-bg--focus: #{colors-light.$blue-dark};
  --color-bg--disabled: #{colors-light.$blue};

  --color-text: #{colors-light.$navy-white};

  --color-outline: #{colors-light.$focus-outline};
}

:host(:hover) {
  background: var(--color-bg--hover);
}
:host(:active) {
  background: var(--color-bg--active);
  box-shadow: none !important;
}
:host(:focus) {
  outline: none;
  background: var(--color-bg--focus);
  box-shadow: var(--color-outline);
}
@include helpers.host-with-attr(disabled) {
  background: var(--color-bg--disabled);
  opacity: transparency.$disabled;
  cursor: default;
}

// Variants ------------------------------------------------------------------------------------------------------------
@mixin button-variant($variant) {
  [variant="#{$variant}"] {
    :host(&) {
      @content(dark);
    }

    &[theme="light"] {
      :host(&) {
        @content(light);
      }
    }
  }
}

@include button-variant(secondary) using ($theme) {
  @if $theme == dark {
    --color-bg: #{transparency.$light-4};
    --color-bg--hover: #{transparency.$light-3};
    --color-bg--active: #{transparency.$light-1};
    --color-bg--focus: #{transparency.$light-3};
    --color-bg--disabled: #{transparency.$light-2};
  } @else if $theme == light {
    --color-bg: #{transparency.$light-4};
    --color-bg--hover: #{transparency.$light-3};
    --color-bg--active: #{transparency.$light-1};
    --color-bg--focus: #{transparency.$light-3};
    --color-bg--disabled: #{transparency.$light-2};

    --color-text: #{colors-light.$navy-darker};
  }
}
[variant="secondary"] {
  &[theme="light"] {
    :host(&:hover),
    :host(&:active),
    :host(&:focus) {
      --color-text: #{colors-light.$navy-white};
    }
  }
}

@include button-variant(tertiary) using ($theme) {
  @if $theme == dark {
    --color-bg: transparent;
    --color-bg--hover: #{transparency.$light-2};
    --color-bg--active: transparent;
    --color-bg--focus: #{transparency.$light-2};
    --color-bg--disabled: transparent;

    --color-border: #{colors.$navy-lightest};

    box-shadow: inset 0 0 0 2px var(--color-border);
  } @else if $theme == light {
    --color-bg: transparent;
    --color-bg--hover: #{transparency.$dark-1};
    --color-bg--active: transparent;
    --color-bg--focus: #{transparency.$dark-1};
    --color-bg--disabled: transparent;

    --color-text: #{colors-light.$navy-dark};

    --color-border: #{colors.$navy-light};
  }
}
[variant="tertiary"] {
  :host(&:hover),
  :host(&:focus) {
    --color-border: #{colors.$navy-lighter};
  }
  :host(&:active) {
    --color-border: #{colors.$navy};
  }
  :host(&:focus) {
    box-shadow: inset 0 0 0 2px var(--color-border), var(--color-outline) !important;
  }
  :host(&[disabled]:not([disabled="false"])) {
    --color-border: #{colors.$navy-white};
  }

  &[theme="light"] {
    :host(&:hover),
    :host(&:active),
    :host(&:focus) {
      --color-border: #{colors-light.$navy};
    }
    :host(&[disabled]:not([disabled="false"])) {
      --color-border: #{colors-light.$navy};
    }
  }
}

@include button-variant(destructive) using ($theme) {
  @if $theme == dark {
    --color-bg: #{colors.$red};
    --color-bg--hover: #{colors.$red-dark};
    --color-bg--active: #{colors.$red-darker};
    --color-bg--focus: #{colors.$red-dark};
    --color-bg--disabled: #{colors.$red};
  } @else if $theme == light {
    --color-bg: #{colors-light.$red};
    --color-bg--hover: #{colors-light.$red-dark};
    --color-bg--active: #{colors-light.$red-darker};
    --color-bg--focus: #{colors-light.$red-dark};
    --color-bg--disabled: #{colors-light.$red};
  }
}

@include button-variant(inline) using ($theme) {
  @if $theme == dark {
    --color-bg: transparent;
    --color-bg--hover: transparent;
    --color-bg--active: transparent;
    --color-bg--focus: transparent;
    --color-bg--disabled: transparent;

    --color-text: #{colors.$blue-lighter};
  } @else if $theme == light {
    --color-bg: transparent;
    --color-bg--hover: transparent;
    --color-bg--active: transparent;
    --color-bg--focus: transparent;
    --color-bg--disabled: transparent;

    --color-text: #{colors-light.$blue};
  }
}
[variant="inline"] {
  :host(&) {
    padding: 0;
  }

  :host(&:hover),
  :host(&:focus) {
    --color-text: #{colors.$blue-light};
  }
  :host(&:active) {
    --color-text: #{colors.$blue};
  }

  &[theme="light"] {
    :host(&:hover),
    :host(&:focus) {
      --color-text: #{colors-light.$blue-dark};
    }
    :host(&:active) {
      --color-text: #{colors-light.$blue-darker};
    }
  }
}

// Sizes ---------------------------------------------------------------------------------------------------------------
:host([size="large"]) {
  --size-height: 40px;
}
:host([size="small"]) {
  --size-height: 24px;

  font-size: typography.$size-small;
  font-weight: typography.$weight-bold;

  @include spacing.padding(none, s);
}

[slot^="icon"] {
  ::slotted(&) {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  &[slot$="left"] {
    ::slotted(&) {
      margin: {
        left: spacing.$space-xxs * -1;
        right: spacing.$space-xs;
      };
    }

    :host([variant="inline"]) ::slotted(&) {
      margin-left: 0;
    }

    :host([size="small"]) ::slotted(&) {
      margin-right: spacing.$space-xxs;
    }
  }

  &[slot$="right"] {
    ::slotted(&) {
      margin-left: spacing.$space-xs;
      margin-right: spacing.$space-xxs * -1;
    }

    :host([variant="inline"]) ::slotted(&) {
      margin-right: 0 !important;
    }

    :host([size="small"]) ::slotted(&) {
      margin-left: spacing.$space-xxs;
      margin-right: spacing.$space-xxs * -1;
    }
  }
}
