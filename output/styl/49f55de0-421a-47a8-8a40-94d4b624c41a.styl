// Clear the float on any element.
clearfix()
	&:after
		display table
		clear both
		content ''

// Fix no working `-webkit-text-size-adjust: 100%;` in Android.
fix-text-size-adjust()
	background-image linear-gradient(transparent, transparent)

// Set element size
size($width, $height = $width)
	width $width
	height $height

// Set margin on left & right
margin-x($margin)
	margin-left $margin
	margin-right $margin

// Set margin on top & bottom
margin-y($margin)
	margin-top $margin
	margin-bottom $margin

// Set pading on left & right
padding-x($padding)
	padding-left $padding
	padding-right $padding

// Set padding on top & bottom
padding-y($padding)
	padding-top $padding
	padding-bottom $padding

// Set one static retina image
retinaBackground($image, $ext = 'png') {
	background-image url('../images/' + $image + '.' + $ext)

	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
		background-image url('../images/' + $image + '@2x.' + $ext)
	}
}

placeholder()
	if selector() == "&"
		error( "placeholder() must be called from a ruleset!" )
	&::-webkit-input-placeholder
		{block}
	&:-moz-placeholder
		{block}
	&::-moz-placeholder
		{block}
	&:-ms-input-placeholder
		{block}

m-nl()
	margin 0
	padding 0
	text-indent 0
	list-style none
	list-style-position outside

m-cf()
	&:before, &:after
		display table
		content ""

	&:after
		clear both

	.lt-ie8 &
		zoom 1


m-blocks-justify()
	text-align justify
	text-justify newspaper



// Fix no working `-webkit-text-size-adjust: 100%;` in Android.
fix-text-size-adjust()
	background-image linear-gradient(transparent, transparent)

// Set element size
size($width, $height = $width)
	width $width
	height $height

// Set margin on left & right
margin-x($margin)
	margin-left $margin
	margin-right $margin

// Set margin on top & bottom
margin-y($margin)
	margin-top $margin
	margin-bottom $margin

// Set pading on left & right
padding-x($padding)
	padding-left $padding
	padding-right $padding

// Set padding on top & bottom
padding-y($padding)
	padding-top $padding
	padding-bottom $padding

// Set one static retina image
retinaBackground($image, $ext = 'png') {
	background-image url('../images/' + $image + '.' + $ext)

	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
		background-image url('../images/' + $image + '@2x.' + $ext)
	}
}

set-font-size(value) {
	font-size: value; /* add PX (or original value) as backup */

	if (value is inherit) {
		/* do nothing, "inherit" has no unit */
	} else {
		font-size: remify(value);
	}
}

remify(value) { /* separate mixin, so it can be used elsewhere */
	u = unit(value);

	if (u is 'px') {
		return unit(value/16, 'rem');
	} else {
		return unit(value, u);
	}
}

// hide-text

hide-text()
	overflow hidden
	text-indent 110%
	white-space nowrap

// font-face

font-face($font-name, $file-path, $weight = 'normal', $style = 'normal')

	$url-fallback = 'url("' + $file-path + '.eot")'
	$url  = 'url("' + $file-path + '.eot?#iefix") format("embedded-opentype"), '
	$url = $url + 'url("' + $file-path + '.woff") format("woff"), '
	$url = $url + 'url("' + $file-path + '.ttf") format("truetype"), '
	$url = $url + 'url("' + $file-path + '.svg#svg' + $font-name + '") format("svg")'

	@font-face
		font-family $font-name
		src unquote($url-fallback)
		src unquote($url)
		font-weight unquote($weight)
		font-style unquote($style)

// ellipsis

ellipsis($nowrap = true)
	text-overflow ellipsis
	overflow hidden
		if $nowrap
			white-space nowrap


// percentage

percentage($decimal)
	( $decimal * 100 ) %


ratio-percentage($numerator, $denominator)
	( $numerator / $denominator  * 100 ) %

ratio($numerator, $denominator)
	( $numerator / $denominator )


// letter-spacing

tracking($val, $base = false)
	if $base
		( ( $val * $base ) / 1000 ) px
	else
		( $val / 1000 ) em


//
// TRIANGLE
// ========
// Creates a CSS triangle by passing a direction, size, and color
//


triangle($point = 'up', $size = 1em, $color = #777)

	if $size is a 'unit' && $color is a 'color'

		if $point == 'up'
			_triangle-borders({top: '', right: transparent, bottom: solid, left: transparent}, $size, $color)
		else if $point == 'right'
			_triangle-borders({top: transparent, right: '', bottom: transparent, left: solid}, $size, $color)
		else if $point == 'down'
			_triangle-borders({top: solid, right: transparent, bottom: '', left: transparent}, $size, $color)
		else if $point == 'left'
			_triangle-borders({top: transparent, right: solid, bottom: transparent, left: ''}, $size, $color)
		else if $point == 'up-left'
			$size = ($size / 2)
			_triangle-borders({top: solid, right: transparent, bottom: transparent, left: solid}, $size, $color)
		else if $point == 'up-right'
			$size = ($size / 2)
			_triangle-borders({top: solid, right: solid, bottom: transparent, left: transparent}, $size, $color)
		else if $point == 'down-right'
			$size = ($size / 2)
			_triangle-borders({top: transparent, right: solid, bottom: solid, left: transparent}, $size, $color)
		else if $point == 'down-left'
			$size = ($size / 2)
			_triangle-borders({top: transparent, right: transparent, bottom: solid, left: solid}, $size, $color)


//
// TRIANGLE BORDERS
// This mixin should not be called directly
//

_triangle-borders($sides, $size, $color)

	width 0
	height 0

	for $side, $style in $sides
		if $style == solid
			border-{$side} $size solid $color
		else if $style == transparent
			border-{$side} $size solid transparent



//
// INTERNET EXPLORER
// =================
//

// Default Variables
$is-ie ?= false
$is-ie--version ?= 0

ie($version, $strict = false)
	if ($is-ie == true)
		if($strict == true)
			if ($is-ie--version == $version)
				{block}
	else
		if ($is-ie--version <= $version)
			{block}




//
// OPACITY
// =======
//


// Default Variables
$is-ie ?= false

opacity($n, $args...)
	opacity: $n $args
	if $is-ie
		$val = round($n * 100)
		+ie(8, true)
			-ms-filter: '"alpha(opacity=%s)"' % $val $args
		+ie(7)
			filter: 'alpha(opacity=%s)' % $val $args


//
// CLEARFIX
// ========
//


clearfix()
	+ie(7, true)
		zoom 1

	&:before
	&:after
		content ""
		display table
	&:after
		clear both



//
// TIMING FUNCTIONS
// ================
//


// SINE
$ease-in-sine      = cubic-bezier(0.470,  0.000, 0.745, 0.715)
$ease-out-sine     = cubic-bezier(0.390,  0.575, 0.565, 1.000)
$ease-in-out-sine  = cubic-bezier(0.445,  0.050, 0.550, 0.950)

// QUAD
$ease-in-quad      = cubic-bezier(0.550,  0.085, 0.680, 0.530)
$ease-out-quad     = cubic-bezier(0.250,  0.460, 0.450, 0.940)
$ease-in-out-quad  = cubic-bezier(0.455,  0.030, 0.515, 0.955)

// CUBIC
$ease-in-cubic     = cubic-bezier(0.550,  0.055, 0.675, 0.190)
$ease-out-cubic    = cubic-bezier(0.215,  0.610, 0.355, 1.000)
$ease-in-out-cubic = cubic-bezier(0.645,  0.045, 0.355, 1.000)

// QUART
$ease-in-quart     = cubic-bezier(0.895,  0.030, 0.685, 0.220)
$ease-out-quart    = cubic-bezier(0.165,  0.840, 0.440, 1.000)
$ease-in-out-quart = cubic-bezier(0.770,  0.000, 0.175, 1.000)

// QUINT
$ease-in-quint     = cubic-bezier(0.755,  0.050, 0.855, 0.060)
$ease-out-quint    = cubic-bezier(0.230,  1.000, 0.320, 1.000)
$ease-in-out-quint = cubic-bezier(0.860,  0.000, 0.070, 1.000)

// EXPO
$ease-in-expo      = cubic-bezier(0.950,  0.050, 0.795, 0.035)
$ease-out-expo     = cubic-bezier(0.190,  1.000, 0.220, 1.000)
$ease-in-out-expo  = cubic-bezier(1.000,  0.000, 0.000, 1.000)

// CIRC
$ease-in-circ      = cubic-bezier(0.600,  0.040, 0.980, 0.335)
$ease-out-circ     = cubic-bezier(0.075,  0.820, 0.165, 1.000)
$ease-in-out-circ  = cubic-bezier(0.785,  0.135, 0.150, 0.860)

// BACK
$ease-in-back      = cubic-bezier(0.600, -0.280, 0.735, 0.045)
$ease-out-back     = cubic-bezier(0.175,  0.885, 0.320, 1.275)
$ease-in-out-back  = cubic-bezier(0.680, -0.550, 0.265, 1.550)


